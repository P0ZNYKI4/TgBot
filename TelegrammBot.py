# cd D:\Python\–ó–∞–∫–∞–∑—ã\TgBot & D: & python TelegrammBot.py

import telebot
from telebot import types
from datetime import date
from Token import TOKEN
import os

bot = telebot.TeleBot(TOKEN)

# —Ö—Ä–∞–Ω–∏—Ç id –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∑–∞–ø–æ–ª–Ω—è—é—â–∏–π –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –∏—Ö –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
not_ready_report: dict = dict() # {id: [–ø—É–Ω–∫—Ç –æ—Ç—á—ë—Ç–∞, [create_date, 1, 2, 3, 4, 5]]}

# —Ö—Ä–∞–Ω–∏—Ç id –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∑–∞–ø–æ–ª–Ω—è—é—â–∏–π –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –∏—Ö –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
ready_report: dict = dict()  # {id: [–ø—É–Ω–∫—Ç –æ—Ç—á—ë—Ç–∞, [1, 2, 3, 4, 5, 6, 7, 8, 9]]}

"""
–û—Ç—á—ë—Ç

1. –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
2. —Ñ–∏–æ
3. –≥–æ—Å –Ω–æ–º–µ—Ä
4. –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
5. –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ

–∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
6. –≤—Ä–µ–º—è –∫–æ–Ω–µ—Ü
7. –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ
8. –∑–∞–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—Ç—Ä–∞—Ö
9. –≤—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤


–•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
[chat.id, create_date, 1, 2, 3, 4]

–•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
[create_date, 1, 2, 3, 4, 5, 6, 7, 8, 9]
"""

# –∏–Ω–∏—Ü–∏–∞–ª–∞–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤

if not os.path.exists("NotReadyReport.txt"):
	my_file = open("NotReadyReport.txt", "w+")
	my_file.close()

if not os.path.exists("Reports.txt"):
	my_file = open("Reports.txt", "w+")
	my_file.close()

@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(
		message.chat.id,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! /registration"
	)


@bot.message_handler(commands=['registration'])
def registration(message):

	markup = types.InlineKeyboardMarkup()

	director = types.InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data="start")
	driver = types.InlineKeyboardButton("–í–æ–¥–∏—Ç–µ–ª—å", callback_data="driver_menu_open")

	markup.add(director, driver)

	bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: True)
def callback(call):

	#global not_ready_report

	# –∫–Ω–æ–ø–∫–∏
	if call.message:

		# –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª–µ–π
		if call.data == 'driver_menu_open':
			driver_menu(call.message, True)

		# –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞
		elif call.data == 'open_report':

			not_ready_report[call.message.chat.id] = [1,
				[DateManagement().create_date_today(), None, None, None, None, None]
			]
			send_number_quest(bot, call.message.chat.id, 1)

		# –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞
		elif call.data == "close_report":

			FileManagemen().del_space("NotReadyReport.txt")

			report_now = FileManagemen().get_an_incomplete_report(call.message.chat.id)

			if not (report_now is None):
				ready_report[call.message.chat.id] = report_now

				send_number_quest(bot, call.message.chat.id, 6)

			else:
				bot.send_message(
					call.message.chat.id,
					"–í–∞—à –æ—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
				)
				driver_menu(call.message, True)

	

def driver_menu(message, open_report: bool):

	markup = types.InlineKeyboardMarkup()
	
	if open_report:
		button_1 = types.InlineKeyboardButton("üöõ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É üöõ", callback_data="open_report")
	else:
		button_1 = types.InlineKeyboardButton("üöõ –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É üöõ", callback_data="close_report")

	markup.add(button_1)

	bot.send_message(message.chat.id, "_____–ú–µ–Ω—é_____", reply_markup=markup)


# –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
@bot.message_handler()
def filling_report(message):

	# –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
	if message.chat.id in not_ready_report:

		# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

		# not_ready_report = {id: [–ø—É–Ω–∫—Ç –æ—Ç—á—ë—Ç–∞, [1, 2, 3, 4, 5]]}
		not_ready_report[message.chat.id][1][
			not_ready_report[message.chat.id][0]
		] = message.text

		not_ready_report[message.chat.id][0] += 1

		if not_ready_report[message.chat.id][0] != 6:
			send_number_quest(
				bot,
				message.chat.id,
				not_ready_report[message.chat.id][0]
			)
		else:
			# —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
			FileManagemen().create_not_ready_report(
				report_data=not_ready_report[message.chat.id][1],
				driver_id=[message.chat.id]
			)

			bot.send_message(
				message.chat.id,
				"üì© –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–º–µ–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " +
				"\"–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É\" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á—ë—Ç –¥–æ –∫–æ–Ω—Ü–∞. –ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ –∑–∞ —Ä—É–ª–µ–º!"
			)

			# —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			del not_ready_report[message.chat.id]

			driver_menu(message, False)

	# –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
	if message.chat.id in ready_report:

		# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

		ready_report[message.chat.id][1][
			ready_report[message.chat.id][0]
		] = message.text

		ready_report[message.chat.id][0] += 1


		if ready_report[message.chat.id][0] != 10:
			send_number_quest(
				bot,
				message.chat.id,
				ready_report[message.chat.id][0]
			)
		else:
			
			# —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
			FileManagemen().del_not_ready_report(message.chat.id)

			# —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
			FileManagemen().create_ready_report(
				report_data=ready_report[message.chat.id][1]
			)

			bot.send_message(message.chat.id,"üì© –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ")

			# —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			del ready_report[message.chat.id]

			driver_menu(message, True)


def send_number_quest(bot, driver_id: int, quest_num: int):

	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—É–Ω–∫—Ç–∞ –∏–∑ –æ—Ç—á—ë—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω"""

	match quest_num:
		case 1:
			bot.send_message(driver_id, "–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞:")
		case 2:
			bot.send_message(driver_id, "(–§–∞–º–∏–ª–∏—è –ò.–û.):")
		case 3:
			bot.send_message(driver_id, "–ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
		case 4:
			bot.send_message(driver_id, "‚è±Ô∏è–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
		case 5 | 7:
			bot.send_message(driver_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
		case 6:
			bot.send_message(driver_id, "‚è±Ô∏è–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):")
		case 8:
			bot.send_message(driver_id, "–ó–∞–ø—Ä–∞–≤–∫–∏: (–õ–∏—Ç—Ä–æ–≤)")
		case 9:
			bot.send_message(driver_id, "–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤:")
		case -1:
			bot.send_message(
				driver_id,
				"‚ùå–í–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ " +
				"—à–∞–±–ª–æ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑."
			)


class FileManagemen:

	"""–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""

	def create_not_ready_report(self, report_data: list, driver_id: list) -> None:
		"""–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
		with open("NotReadyReport.txt", "a") as f:
			f.write(f"{driver_id + report_data}\n")


	def create_ready_report(self, report_data: list) -> None:
		"""–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
		with open("Reports.txt", "a") as f:
			f.write(f"{report_data}\n")


	def get_an_incomplete_report(self, driver_id: int) -> list | None:
		"""–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–º –æ—Ç—á—ë—Ç–µ"""
		with open("NotReadyReport.txt", "r") as f:

			lines = f.readlines()

			if lines != ["\n"]:
				for i in lines:
					i = eval(i)
					if i[0] == driver_id:
						return [6, i[1:] + [None, None, None, None]]
		return None


	def check_id(self, driver_id: int) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç id –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
		with open("NotReadyReport.txt", "r") as f:
			lines = f.readlines()
			
		for i in lines:
			if int(i[0]) == driver_id:
				return True

		return False


	def del_space(self, file_dir: str) -> None:
		"""–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ –≤ —Ñ–∞–π–ª–µ"""
		with open(file_dir, "r") as f:
			lines = f.readlines()

		with open(file_dir,"w") as f:
			for i in lines:
				if i != "\n":
					f.write(i)

	def del_not_ready_report(self, driver_id: int) -> None:
		"""–£–¥–∞–ª—è–µ—Ç –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç"""

		with open("NotReadyReport.txt", "r") as f:
			lines = f.readlines()

		with open("NotReadyReport.txt", "w") as f:

			for i in lines:

				if eval(i)[0] != driver_id:
					f.write(i)

class DateManagement:

	def create_date_today(self) -> str:
		"""–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"""
		date_now = date.today()
		return f"{date_now.day}.{date_now.month}.{date_now.year}"


bot.infinity_polling(none_stop=True)

# cd D:\Python\–ó–∞–∫–∞–∑—ã\TgBot & D: & python TelegrammBot.py
